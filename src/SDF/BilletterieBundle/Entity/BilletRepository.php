<?php

namespace SDF\BilletterieBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * BilletRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BilletRepository extends EntityRepository
{
	public function findAllValidTicketsForUser($user)
	{
		$queryBuilder = $this->createQueryBuilder('b');

		$queryBuilder
			->where($queryBuilder->expr()->eq('b.user', ':user'))
			->andWhere($queryBuilder->expr()->eq('b.valide', ':valid'))
			->setParameter('user', $user)
			->setParameter('valid', true)
		;

		return $queryBuilder->getQuery()->getResult();
	}

	public function findOneUnvalidTicketsForUser($user)
	{
		$billet = null;

		$queryBuilder = $this->createQueryBuilder('b');

		$queryBuilder
			->where($queryBuilder->expr()->eq('b.user', ':user'))
			->andWhere($queryBuilder->expr()->eq('b.valide', ':valid'))
			->setParameter('user', $user)
			->setParameter('valid', false)
		;

		try {
			$billet = $queryBuilder->getQuery()->getSingleResult();
		}
		catch (NoResultException $e) {}

		return $billet;
	}

	public function countAllSoldForEvent($event)
	{
		$queryBuilder = $this->createQueryBuilder('b');

		// Do not check if the tickets are valid or not.
		$queryBuilder
			->select($queryBuilder->expr()->count('b.id'))
			->leftJoin('b.tarif', 't')
			->where($queryBuilder->expr()->eq('t.evenement', ':event'))
			->setParameter('event', $event)
		;

		return $queryBuilder->getQuery()->getSingleScalarResult();
	}

	public function countAllSoldForPrice($price)
	{
		$queryBuilder = $this->createQueryBuilder('b');

		// Do not check if the tickets are valid or not.
		$queryBuilder
			->select($queryBuilder->expr()->count('b.id'))
			->leftJoin('b.tarif', 't')
			->where($queryBuilder->expr()->eq('b.tarif', ':price'))
			->setParameter('price', $price)
		;

		return $queryBuilder->getQuery()->getSingleScalarResult();
	}

	public function countAllSoldForPriceAndUser($price, $user)
	{
		$queryBuilder = $this->createQueryBuilder('b');

		$queryBuilder
			->select($queryBuilder->expr()->count('b.id'))
			->where($queryBuilder->expr()->eq('b.tarif', ':price'))
			->andWhere($queryBuilder->expr()->eq('b.user', ':user'))
			->setParameter('price', $price)
			->setParameter('user', $user)
		;

		return $queryBuilder->getQuery()->getSingleScalarResult();
	}
}
